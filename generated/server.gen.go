// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a shortened URL
	// (POST /urls)
	CreateShortUrl(c *gin.Context)
	// Delete a shortened URL
	// (DELETE /urls/{short-path})
	DeleteShortUrl(c *gin.Context, shortPath string)
	// Retrieve details of a shortened URL
	// (GET /urls/{short-path})
	GetShortUrlDetails(c *gin.Context, shortPath string)
	// Update a shortened URL
	// (PUT /urls/{short-path})
	UpdateShortUrl(c *gin.Context, shortPath string)
	// Redirect to the original URL
	// (GET /{short-path})
	RedirectToOriginalUrl(c *gin.Context, shortPath string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateShortUrl operation middleware
func (siw *ServerInterfaceWrapper) CreateShortUrl(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateShortUrl(c)
}

// DeleteShortUrl operation middleware
func (siw *ServerInterfaceWrapper) DeleteShortUrl(c *gin.Context) {

	var err error

	// ------------- Path parameter "short-path" -------------
	var shortPath string

	err = runtime.BindStyledParameterWithOptions("simple", "short-path", c.Param("short-path"), &shortPath, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter short-path: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteShortUrl(c, shortPath)
}

// GetShortUrlDetails operation middleware
func (siw *ServerInterfaceWrapper) GetShortUrlDetails(c *gin.Context) {

	var err error

	// ------------- Path parameter "short-path" -------------
	var shortPath string

	err = runtime.BindStyledParameterWithOptions("simple", "short-path", c.Param("short-path"), &shortPath, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter short-path: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetShortUrlDetails(c, shortPath)
}

// UpdateShortUrl operation middleware
func (siw *ServerInterfaceWrapper) UpdateShortUrl(c *gin.Context) {

	var err error

	// ------------- Path parameter "short-path" -------------
	var shortPath string

	err = runtime.BindStyledParameterWithOptions("simple", "short-path", c.Param("short-path"), &shortPath, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter short-path: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateShortUrl(c, shortPath)
}

// RedirectToOriginalUrl operation middleware
func (siw *ServerInterfaceWrapper) RedirectToOriginalUrl(c *gin.Context) {

	var err error

	// ------------- Path parameter "short-path" -------------
	var shortPath string

	err = runtime.BindStyledParameterWithOptions("simple", "short-path", c.Param("short-path"), &shortPath, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter short-path: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RedirectToOriginalUrl(c, shortPath)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/urls", wrapper.CreateShortUrl)
	router.DELETE(options.BaseURL+"/urls/:short-path", wrapper.DeleteShortUrl)
	router.GET(options.BaseURL+"/urls/:short-path", wrapper.GetShortUrlDetails)
	router.PUT(options.BaseURL+"/urls/:short-path", wrapper.UpdateShortUrl)
	router.GET(options.BaseURL+"/:short-path", wrapper.RedirectToOriginalUrl)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTW/jNhD9K8S0RyX2ZtNDddvuLooAKVo48anIgRXHFhcUyQ5HQQ3D/70YSrITW9vC",
	"aKFNgNzs4dfjm/eGoy1UoYnBo+cE5RZSVWOj88/PRIEWmGLwCSUQKUQktpiHG0xJr/MAbyJCCYnJ+jXs",
	"dsUQCX98wYphV8BdHYjRo1mS+4SsrUunWwaya+u1W5Ib2baAJJtcRM3114fH155CkpD1qyCTDaaKbGQb",
	"PJTwQS0+392rD7/dqFUglTrk1q/VcnGbCtVor9fyl2tsCqW9UbX2xkmI0FjCitMlFMCWnRy5XNyq4f4k",
	"+0IBj0ipO+7d5fxyLvBDRK+jhRLe51ABctNMzKylnq+QODMVkbTgvTFQwkdCzXg3XL8Awj9bTPxTMBuZ",
	"XQXP6PNCHaOzVV46+5IEwJDzf03HKlCjGUpoyUIxwrCcagkNlL8/W/swSv5hNlOLOdBJLZ99NX/3H5Cf",
	"rYTnCtiLVTKuqsyukRRdz+dnofqecAUlfDc7mGzWO2z23F4jKG78o3bWqD6ZKuqNC7rH8eN0OD4Gv3K2",
	"YnWR6dCOUJvN4IuemKsJAd2HICbcDMwkdaEWmlE521hW+FeFaDpcP0ybMEby2qmE9IikUBZkxaW2aTRt",
	"9lZV+kCfkCp20uskxhGKf5EKg40gfpDl2f6z7aH87bqq5ZDxtBp8yvEn1SBq0g0ykhywBStYcxEtwOsm",
	"m+NQWI+NWTxh59hKDyemvT4tp3KhDqpRqa0qTGnVOrfpdHw9XXoEiA+sVqH1b6I9R7Sdos4RbQFrHHmo",
	"fkYedDk0AZPK8//jdayf+YrmTDesCJksPg4vyZvyX4HyF33O9kkMq/NsENsRGyyj0RNW6NffC07u2+cd",
	"YJvz9cI6wG9aP75h/9klQ1V99EWWjc7g53Z5xw3e6BO66L8w78OvT2w14Sv6fn512uQNqPJncVCD4/tb",
	"16hNBraF29BlZbxP5LD/glYc4J9g7d4e0dfziO5TqrjGY3UMnhimiRtkfd6wU3Mrrw7UzDGVs5kLlXZ1",
	"SAy7h93fAQAA//9s7AhawRIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
