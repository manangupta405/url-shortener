// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "url-shortener/internal/models"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// URLRepository is an autogenerated mock type for the URLRepository type
type URLRepository struct {
	mock.Mock
}

// DeleteShortURL provides a mock function with given fields: ctx, shortPath, currentTime
func (_m *URLRepository) DeleteShortURL(ctx context.Context, shortPath string, currentTime time.Time) error {
	ret := _m.Called(ctx, shortPath, currentTime)

	if len(ret) == 0 {
		panic("no return value specified for DeleteShortURL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, shortPath, currentTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOriginalURL provides a mock function with given fields: ctx, shortPath
func (_m *URLRepository) GetOriginalURL(ctx context.Context, shortPath string) (*models.URL, error) {
	ret := _m.Called(ctx, shortPath)

	if len(ret) == 0 {
		panic("no return value specified for GetOriginalURL")
	}

	var r0 *models.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.URL, error)); ok {
		return rf(ctx, shortPath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.URL); ok {
		r0 = rf(ctx, shortPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShortURL provides a mock function with given fields: ctx, originalURL
func (_m *URLRepository) GetShortURL(ctx context.Context, originalURL string) (*models.URL, error) {
	ret := _m.Called(ctx, originalURL)

	if len(ret) == 0 {
		panic("no return value specified for GetShortURL")
	}

	var r0 *models.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.URL, error)); ok {
		return rf(ctx, originalURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.URL); ok {
		r0 = rf(ctx, originalURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, originalURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertShortURL provides a mock function with given fields: ctx, url
func (_m *URLRepository) InsertShortURL(ctx context.Context, url *models.URL) error {
	ret := _m.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for InsertShortURL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.URL) error); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateShortURL provides a mock function with given fields: ctx, url
func (_m *URLRepository) UpdateShortURL(ctx context.Context, url *models.URL) error {
	ret := _m.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for UpdateShortURL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.URL) error); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewURLRepository creates a new instance of URLRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewURLRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *URLRepository {
	mock := &URLRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
