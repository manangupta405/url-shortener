// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "url-shortener/internal/models"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// URLStatisticsRepository is an autogenerated mock type for the URLStatisticsRepository type
type URLStatisticsRepository struct {
	mock.Mock
}

// GetURLStatistics provides a mock function with given fields: ctx, shortPath
func (_m *URLStatisticsRepository) GetURLStatistics(ctx context.Context, shortPath string) (*models.URLStatistics, error) {
	ret := _m.Called(ctx, shortPath)

	if len(ret) == 0 {
		panic("no return value specified for GetURLStatistics")
	}

	var r0 *models.URLStatistics
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.URLStatistics, error)); ok {
		return rf(ctx, shortPath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.URLStatistics); ok {
		r0 = rf(ctx, shortPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.URLStatistics)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAccessLog provides a mock function with given fields: ctx, shortPath, accessedAt
func (_m *URLStatisticsRepository) InsertAccessLog(ctx context.Context, shortPath string, accessedAt time.Time) error {
	ret := _m.Called(ctx, shortPath, accessedAt)

	if len(ret) == 0 {
		panic("no return value specified for InsertAccessLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, shortPath, accessedAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewURLStatisticsRepository creates a new instance of URLStatisticsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewURLStatisticsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *URLStatisticsRepository {
	mock := &URLStatisticsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
